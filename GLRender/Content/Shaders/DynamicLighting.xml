<?xml version='1.0' encoding='us-ascii'?>
<shader version="400">
  <include>BRDFs</include>
  <function name="DynamicLighting" return="vec3">
    <input type="vec3">V</input>
    <input type="vec3">L</input>
    <input type="GBufferData">data</input>
    <source>
      vec3 H = normalize(V + L);

      float VoL = saturate(dot(V, L));
      float NoV = saturate(dot(data.Normal, V));
      float VoH = saturate(dot(V, H));
      float NoH = saturate(dot(data.Normal, H));
      float NoL = saturate(dot(data.Normal, L));
      float LoH = saturate(dot(L, H));

      vec3 DiffuseColor = data.Color - data.Color * data.Metallicity;
      vec3 f0 = mix( vec3(0.04), data.Color, data.Metallicity );

      vec3 F = F_Schlick(f0, LoH);
      float G = Vis_Schlick(data.Roughness, NoV, NoL);
      float D = D_GGX(data.Roughness, NoH);

      vec3 specular = (F * G * D) * NoL;// / (4*NoL*NoV);
      vec3 diffuse = Diffuse_OrenNayar(DiffuseColor, data.Roughness, VoL, NoV, NoL, VoH);

      return diffuse + specular;
    </source>
  </function>
  <function name="GetAttenuatedIntensity" return="float">
    <input type="float">intensity</input>
    <input type="float">distanceFromLight</input>
    <source>
      float a = 0.00025;
      float b = 10.0;
      float d2 = distanceFromLight * distanceFromLight;
      return ((intensity + a) / (1 + b * d2)) - a;
    </source>
  </function>
  <function name="GetSpotlightFalloff" return="float">
    <input type="vec3">spotDirection</input>
    <input type="vec3">L</input>
    <input type="float">spotAngle</input>
    <source>
      return saturate(dot(L, -spotDirection) - spotAngle);
      //v = 1.0f - v;
      //v = v * v;
      //return 1.0f - v;
    </source>
  </function>
</shader>
