<?xml version='1.0' encoding='us-ascii'?>
<shader version="400">
  <define name="PI" type="float">3.14159265359</define>
  <function name="Diffuse_OrenNayar" return="vec3">
    <input type="vec3">DiffuseColor</input>
    <input type="float">Roughness</input>
    <input type="float">VoL</input>
    <input type="float">NoV</input>
    <input type="float">NoL</input>
    <input type="float">VoH</input>
    <source>
      float m = Roughness * Roughness;
      float m2 = m * m;
      float C1 = 1 - 0.5 * m2 / (m2 + 0.33);
      float Cosri = VoL - NoV * NoL;
      float C2 = 0.45 * m2 / (m2 + 0.09) * Cosri * ( Cosri >= 0 ? min( 1, NoL / NoV ) : NoL );
      return DiffuseColor / PI * ( NoL * C1 + C2 );
    </source>
  </function>
  <function name="D_GGX" return="float">
    <input type="float">Roughness</input>
    <input type="float">NoH</input>
    <source>
      float m = Roughness * Roughness;
      float m2 = m * m;
      float d = ( NoH * m2 - NoH ) * NoH + 1;
      return m2 / ( PI*d*d );
    </source>
  </function>
  <function name="D_Beckmann" return="float">
    <input type="float">Roughness</input>
    <input type="float">NoH</input>
    <source>
      float m = Roughness * Roughness;
      float m2 = m * m;
      float NoH2 = NoH * NoH;
      return exp( (NoH2 - 1) / (m2 * NoH2) ) / ( PI * m2 * NoH2 * NoH2 );
    </source>
  </function>
  <function name="Vis_Schlick" return="float">
    <input type="float">Roughness</input>
    <input type="float">NoV</input>
    <input type="float">NoL</input>
    <source>
      float k = ( Roughness * Roughness ) * 0.5;
      float Vis_SchlickV = NoV * (1 - k) + k;
      float Vis_SchlickL = NoL * (1 - k) + k;
      return 0.25 / ( Vis_SchlickV * Vis_SchlickL );
    </source>
  </function>
  <function name="Vis_Smith" return="float">
    <input type="float">Roughness</input>
    <input type="float">NoV</input>
    <input type="float">NoL</input>
    <source>
      float a = ( Roughness * Roughness );
      float a2 = a*a;

      float Vis_SmithV = NoV + sqrt( NoV * (NoV - NoV * a2) + a2 );
      float Vis_SmithL = NoL + sqrt( NoL * (NoL - NoL * a2) + a2 );
      return inversesqrt( Vis_SmithV * Vis_SmithL );
    </source>
  </function>
  <function name="F_Schlick" return="vec3">
    <input type="vec3">f0</input>
    <input type="float">LoH</input>
    <source>
      // Anything less than 2% is physically impossible and is instead considered to be shadowing
      //return SpecularColor + ( saturate( 50.0 * SpecularColor.g ) - SpecularColor ) * exp2( (-5.55473 * VoH - 6.98316) * VoH );
      //return mix(SpecularColor, vec3(1.0), pow(1.0 - VoH, 5));
      return f0 + (vec3(1.0) - f0) * pow((1.0 - LoH), 5);
    </source>
  </function>
</shader>
