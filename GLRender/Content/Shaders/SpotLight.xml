<?xml version='1.0' encoding='us-ascii'?>
<shader version="400">
  <include>DeferredCommon</include>
  <include>Colorspace</include>
  <include>DynamicLighting</include>
	<vertexshader>
		<input type="vec3" location="0">position</input>
    <uniform type="mat4">world</uniform>
    <uniform type="mat4">proj</uniform>
    <uniform type="mat4">view</uniform>
    <uniform type="vec3">eyePos</uniform>
    <output type="vec3">f_eyePos</output>
    <output type="vec3">f_worldPos</output>
		<source>
      f_eyePos = eyePos;
      vec4 worldPos = world * vec4(position, 1.0);
      f_worldPos = worldPos.xyz;
      gl_Position = proj * view * worldPos;
    </source>
	</vertexshader>
	<fragmentshader>
    <input type="vec3">f_eyePos</input>
    <input type="vec3">f_worldPos</input>
    <uniform type="vec2">screenSize</uniform>
		<uniform type="vec3">lightPosition</uniform>
    <uniform type="vec3">direction</uniform>
		<uniform type="vec3">color</uniform>
		<uniform type="float">intensity</uniform>
    <uniform type="float">spotAngle</uniform>
		<output type="vec4">fragColor</output>
		<source>
      vec2 uv = gl_FragCoord.xy / screenSize;
      GBufferData data = ReadGBuffer(uv);

      vec3 eyeVec = normalize(f_worldPos - f_eyePos);

      vec3 worldPos = f_eyePos + (normalize(eyeVec) * data.Depth);
      float distanceFromLight = distance(lightPosition, worldPos);

      vec3 V = normalize(-eyeVec);
      vec3 L = normalize(lightPosition - worldPos);

      float spotlightFalloff = GetSpotlightFalloff(direction, L, spotAngle);
      float attenuatedIntensity = GetAttenuatedIntensity(distanceFromLight, intensity);

      vec3 lighting = DynamicLighting(V, L, data);

      vec3 preGamma = lighting * spotlightFalloff * attenuatedIntensity * color;
      vec3 postGamma = gammaCorrect(preGamma);
      fragColor = vec4(postGamma, 1);
      //fragColor = vec4(((direction + 1.0f) * 0.5f), 1);
      //float c = saturate(dot(-direction, L));
      //fragColor = vec4(c - spotAngle, 0.0, spotAngle - c, 1);
    </source>
	</fragmentshader>
</shader>
