<?xml version='1.0' encoding='us-ascii'?>
<shader version="400">
	<vertexshader>
		<input type="vec3" location="0">position</input>
		<input type="vec2" location="1">uv</input>
		<input type="vec3" location="2">normal</input>
		<uniform type="mat4">proj</uniform>
		<uniform type="mat4">view</uniform>
		<uniform type="mat4">world</uniform>
    <uniform type="mat4">world_it</uniform>
		<output type="vec2">f_uv</output>
		<output type="vec3">f_normal</output>
		<source>
      f_uv = uv;
      f_normal = (world_it * vec4(normal, 0.0)).xyz;
      gl_Position = proj * view * world * vec4(position, 1.0);
    </source>
	</vertexshader>
	<fragmentshader>
    <uniform type="vec3" default="1.0,1.0,1.0">v_color</uniform>
		<uniform type="sampler2D" default="White.png">t_color</uniform>
    <uniform type="float" default="1.0">v_roughness</uniform>
    <uniform type="sampler2D" default="White.png">t_roughness</uniform>
    <uniform type="float" default="1.0">v_metallicity</uniform>
    <uniform type="sampler2D" default="White.png">t_metallicity</uniform>
		<input type="vec2">f_uv</input>
		<input type="vec3">f_normal</input>
		<output type="vec4" location="0">g_color</output>
		<output type="vec4" location="1">g_normal</output>
		<source>
      vec3 d = texture(t_color, f_uv).rgb * v_color;
      float r = texture(t_roughness, f_uv).r * v_roughness;
      float m = texture(t_metallicity, f_uv).r * v_metallicity;

      g_color = vec4(d, r);
      g_normal = vec4(f_normal, m);
    </source>
	</fragmentshader>
</shader>
