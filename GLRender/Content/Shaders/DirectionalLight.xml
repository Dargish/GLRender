<?xml version='1.0' encoding='us-ascii'?>
<shader version="400">
  <include>DeferredCommon</include>
  <include>Colorspace</include>
  <include>BRDFs</include>
	<vertexshader>
		<input type="vec3" location="0">position</input>
		<input type="vec2" location="1">uv</input>
    <uniform type="mat4">proj</uniform>
    <uniform type="mat4">view</uniform>
    <uniform type="vec3">eyePos</uniform>
		<output type="vec2">f_uv</output>
    <output type="vec3">f_eyeVec</output>
		<source>
      f_uv = uv;
      f_eyeVec = normalize(position - eyePos);
      gl_Position = proj * view * vec4(position, 1.0);
    </source>
	</vertexshader>
	<fragmentshader>
		<input type="vec2">f_uv</input>
    <input type="vec3">f_eyeVec</input>
		<uniform type="vec3">direction</uniform>
		<uniform type="vec3">color</uniform>
		<uniform type="float">intensity</uniform>
		<output type="vec4">fragColor</output>
		<source>
      GBufferData data = ReadGBuffer(f_uv);

      vec3 V = normalize(-f_eyeVec);
      vec3 L = normalize(-direction);
      vec3 H = normalize(V + L);

      float VoL = saturate(dot(V, L));
      float NoV = saturate(dot(data.Normal, V));
      float VoH = saturate(dot(V, H));
      float NoH = saturate(dot(data.Normal, H));
      float NoL = saturate(dot(data.Normal, L));
      float LoH = saturate(dot(L, H));

      vec3 DiffuseColor = data.Color - data.Color * data.Metallicity;
      //vec3 SpecularColor = mix( vec3(0.04), data.Color, data.Metallicity );

      //float rI = 0.5;
      //float f0 = pow((1 - rI)/(1 + rI), 2);
      float f0 = 0.136175; // hard-coded to rI = 0.46090 (copper)

      float F = F_Schlick(f0, LoH);
      float G = Vis_Schlick(data.Roughness, NoV, NoL);
      float D = D_GGX(data.Roughness, NoH);

      vec3 specular = F * G * D * data.Color;
      vec3 diffuse = Diffuse_OrenNayar(DiffuseColor, data.Roughness, VoL, NoV, NoL, VoH);

      vec3 preGamma = NoL * (diffuse + specular) * intensity * color;
      vec3 postGamma = gammaCorrect(preGamma);
      fragColor = vec4(postGamma, 1);
      //fragColor = vec4(preGamma, 1);
      //fragColor = vec4(F, 1);
      //fragColor = vec4(NoL * specular * intensity * color, 1);
      //fragColor = vec4(NoL * diffuse * intensity * color, 1);
      //fragColor = vec4(vec3(D), 1);
    </source>
	</fragmentshader>
</shader>
